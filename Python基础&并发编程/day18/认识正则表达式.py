# -*- coding:utf-8 -*-
# 一、正则表达式定义：字符串匹配的一种规则，只能匹配字符串。

# 二、正则表达式的规则：
'''
字符组：[字符组]
在同一个位置上可能出现的各种字符组成的一个字符组，在正则表达式中用[]表示
字符分为很多类，比如数字，字母，标点符号等等。
假如你要求一个位置上只允许数字，那么这个位置上的字符只能是0,1,2...9这10个数之一。
一个字符组，只能匹配一个字符
字符组             带匹配字符          匹配结果         说明
[0123456789]           1                  True           字符组中任意一个字符和带匹配的字符相同都可以视为匹配
[0123456789]           11                 False          一个字符组只能匹配一个字符，但是可以分别匹配到1,1
[0123456789]           a                  False         'a'字符不在字符组中
[0-9]                  2                  True          使用[0-9]表示所有的数字和[0123456789]一样
[a-z]                  a                  True          匹配所有的26个小写字母
[A-Z]                  A                  True          匹配所有的26个大写字母
[A-Za-z0-9]            A1a                True          匹配大写字母，小写字母，数字
'''

# 元字符
# 元字符                           匹配内容
#   .                       匹配除换行符外的任意字符
#   \w                      匹配字母数字下划线
#   \s                      匹配任意的空白符
#   \d                      匹配数字
#   \W                      匹配非字母数字下划线的字符
#   \S                      匹配非空白符
#   \D                      匹配非数字
#   \n                      匹配一个换行符
#   \t                      匹配一个制表符
#   \b                      匹配一个单词的结尾
#   ^                       匹配字符串的开头
#   $                       匹配字符串的结尾
#   a|b                     匹配a或者b，只要匹配上了就不再匹配了，所以应该把长的放前面
#   ()                      匹配括号内的表达式，也表示一个组，是对一个字符组整体约束的时候用的
#   [...]                   匹配一个字符组中的字符
#   [^...]                  匹配一个除了字符组中的所有字符


# 量词
# 量词                     用法说明
#  *                    重复0次或者多次
#  +                    重复1次或者多次
#  ?                    重复0次或者1次
#  {n}                  重复n次
#  {n,m}                重复n到m次
#  {n,}                 重复n次或者更多次

# 三、贪婪匹配&惰性匹配
# 前面的*，+，？都是贪婪匹配，尽量给你匹配多的，如何让贪婪匹配变成不贪婪匹配，我们可以在量词后面加上？使其变成惰性匹配，尽量少匹配
# 常用的惰性匹配是.*?abc 表示一直取，遇到abc就停止

# 四、转义的问题
# 如果字符中有特殊字符，\s、*，+等不需要他们表示特殊意义，只想表示原来的意思，我们可以在正则表达式前面加上r，在带匹配字符前面也加上r
# 任何特殊字符放在[]中都没有特殊意义，都能够匹配上

# 五、flag问题
# 所有的re 模块的方法中都有flag
# flags有很多可选值：
#
# re.I(IGNORECASE)忽略大小写，括号内是完整的写法
# re.M(MULTILINE)多行模式，改变^和$的行为
# re.S(DOTALL)点可以匹配任意字符，包括换行符
# re.L(LOCALE)做本地化识别的匹配，表示特殊字符集 \w, \W, \b, \B, \s, \S 依赖于当前环境，不推荐使用
# re.U(UNICODE) 使用\w \W \s \S \d \D使用取决于unicode定义的字符属性。在python3中默认使用该flag
# re.X(VERBOSE)冗长模式，该模式下pattern字符串可以是多行的，忽略空白字符，并可以添加注释
