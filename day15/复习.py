#-*- coding:utf-8 -*-
'''
 一、迭代器
1、可迭代的对象调用了__iter__()方法后就是一个迭代器

2、可迭代的(Iterable)
    可以被for循环的都是可迭代的
    可迭代的内部一定包含__iter__()方法
    可迭代协议
3、迭代器(Iterator)
    迭代器内部包含__next__()和__iter__()方法
    迭代器一定可迭代的，可迭代不一定是迭代器
    迭代器协议
4、迭代器取值(__next__)
    通过迭代器内置方法__next__()方法进行取值

二、生成器
1、生成器的本质是迭代器，具有迭代器的所有特性
2、生成器的生成方式有：
    生成器函数
    生成器表达式

2、生成器函数
    含有yield关键字的函数都可以称作为生成器函数
    生成器函数定义：
    def generator()
        print(1)
        yield('a')

     生成器函数调用：
    g = generator()
    g.__next__()        通过next方法取值
    for i in g:
        print(i)        通过for循环取值

    一个生成器取值只能从头到尾取一次，如果需要取开始的值，需要再生成一个生成器
    生成器函数调用返回一个生成器，只有通过__next__()方法，或者for循环生成器才可以取到值
    生成器取值：
        for：
        next：
        send：
            可以传递一个参数给下一个yield使用
            但是要先使用next再使用send
        数据类型强制转换：

3、生成器表达式
    (条件成立的结果 for i in 可迭代的 if 条件)
    (i for i in range(110) if i==100)

4、其他表达式
    [i for i in range(110) if i==100]   列表推导式
    mcase = {'a': 10, 'b': 34}
    res = {mcase[k]:k for k in mcase}   字典推导式
    print(res)    # {10: 'a', 34: 'b'}
'''
